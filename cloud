#!/usr/bin/env python3

# cloud - sync local directory with cloud service using rclone

import datetime
import getpass
import os
import socket
import sys
import datetime
import glob
import configparser
import subprocess
import locale
from pathlib import Path

def main():
    print()
    print(f'{sys.argv[0]} - version 20210314')
    accounts = initialize()
    if len(sys.argv) == 2:
        action = sys.argv[1]
        if action == 'push' or action == 'pull':
            perform(action, accounts)
            status(accounts)
        if action == 'status':
            status(accounts)
    else:
        usage()
    print()

def initialize():

    '''Verify setup, read configuration file, setup and return account list'''

    global CLOUDDATAPATH
    global LOGFILEPATH
    global LOGFILE
    accounts = []
    config_file = Path.home() / '.config/cloud/cloud.conf'
    check_file_exists(config_file)
    config = configparser.ConfigParser()
    config.read(config_file)
    config_sections = config.sections()
    for i in range(len(config_sections)):
        if config_sections[i] == 'primary':
            primary_data_dir = config['primary']['local_data_dir']
            primary_log_dir = config['primary']['local_log_dir']
            CLOUDDATAPATH = Path.home() / primary_data_dir 
            CLOUDDATAPATH.mkdir(parents=True, exist_ok=True)
        else:
            label = config_sections[i]
            local_data_dir = config[label]['local_data_dir']
            remote_data_dir = config[label]['remote_data_dir']
            accounts.append([label, str(CLOUDDATAPATH / local_data_dir), remote_data_dir])
    LOGFILEPATH = Path.home() / primary_log_dir 
    LOGFILEPATH.mkdir(parents=True, exist_ok=True)
    LOGFILE = LOGFILEPATH / 'sync_log.txt'
    if not LOGFILE.is_file():
        LOGFILE.touch()
        with open(LOGFILE, 'w') as f:
            f.write('# sync_log.txt\n')
    verify_remote_log_exists(accounts)
    return accounts

def perform(action, accounts):

    '''Sync remote accounts with local files, push/pull as appropriate'''

    label, local, remote  = 0, 1, 2
    header(f'sync accounts : {action}')
    for i in range(len(accounts)):
        if action == 'push':
            execute_command(f'rclone sync {accounts[i][local]} {accounts[i][remote]}', verbose=True)
        if action == 'pull':
            execute_command(f'rclone sync {accounts[i][remote]} {accounts[i][local]}', verbose=True)
    date = datetime.datetime.now()
    update_log_file(action, date)

def status(accounts):

    '''Return sync status and diff remote and local file lists'''

    header('sync log')
    execute_command(f'rclone sync box:sync_log {LOGFILEPATH}', verbose=True)
    header('file status')
    with open(LOGFILE) as logf:
        content = logf.read().splitlines()
    count = len(content)
    print('last action:        time:                       user@host:')
    print(f'remote push         {last_remote_info()[0][0]}      {last_remote_info()[0][1]}')
    print(f'remote pull         {last_remote_info()[1][0]}      {last_remote_info()[1][1]}')
    print(f'local push          {last_local_info()[0][0]}      {last_local_info()[0][1]}')
    print(f'local pull          {last_local_info()[1][0]}      {last_local_info()[1][1]}')
    print()
    print(f'newest remote file: {content[count-1][58:80]}')
    print(f'{content[count-1][81:]}')
    print()
    latest_local_file_time = latest_local_file()[:22]
    latest_local_file_name = latest_local_file()[23:]
    print(f'newest local file:  {latest_local_file_time}')
    print(f'{latest_local_file_name}')
    if latest_local_file_time > latest_remote_file_time():
        print()
        print('push needed...')
    if latest_remote_file_time() > latest_local_file_time:
        print()
        print('pull needed...')
    print()
    if input('diff (y/N)?') == 'y':
        diff_file_lists(accounts)

def update_log_file(action, date):

    '''Download remote log file, update log, and upload to remote'''

    execute_command(f'rclone sync box:sync_log {LOGFILEPATH}', verbose=False)
    with open(LOGFILE, 'a') as logf:
        actionstring = str(date)[:22] + ' ' + action + ' '
        actionstring += getpass.getuser() + '@' + socket.gethostname() + ' '
        newestfilestring = latest_local_file() 
        logstring = f'{actionstring:55} : {newestfilestring}\n'
        logf.write(logstring)
    execute_command(f'rclone sync {LOGFILEPATH} box:sync_log', verbose=False)

def last_remote_info():

    '''Get last remote push/pull info and return'''

    lastpushinfo = ['', ''] 
    lastpullinfo = ['', '']
    lastinfo = []
    hostname = socket.gethostname()
    with open(LOGFILE) as f:
        content = f.readlines()
    l = len(content)
    for i in range(l):
        words = content[l-1-i].split()
        if words[2] == 'push':
            date_and_time = words[0] + ' ' + words[1]
            userhost = words[3]
            lastpushinfo = [date_and_time, userhost]
            break
    for i in range(l):
        words = content[l-1-i].split()
        if words[2] == 'pull':
            date_and_time = words[0] + ' ' + words[1]
            userhost = words[3]
            lastpullinfo = [date_and_time, userhost]
            break
    lastinfo = [lastpushinfo, lastpullinfo]
    return lastinfo

def last_local_info():

    '''Get last local push/pull info and return'''

    lastpushinfo = ['', ''] 
    lastpullinfo = ['', '']
    lastinfo = []
    hostname = socket.gethostname()
    with open(LOGFILE) as f:
        content = f.readlines()
    l = len(content)
    for i in range(l):
        words = content[l-1-i].split()
        if words[2] == 'push' and ('@' + hostname) in words[3]:
            date_and_time = words[0] + ' ' + words[1]
            userhost = words[3]
            lastpushinfo = [date_and_time, userhost]
            break
    for i in range(l):
        words = content[l-1-i].split()
        if words[2] == 'pull' and('@' + hostname) in words[3]:
            date_and_time = words[0] + ' ' + words[1]
            userhost = words[3]
            lastpullinfo = [date_and_time, userhost]
            break
    lastinfo = [lastpushinfo, lastpullinfo]
    return lastinfo

def last_local_push_time():

    '''Get last local push time and return'''

    lastpushtime=''
    hostname = socket.gethostname()
    with open(LOGFILE) as f:
        content = f.readlines()
    l = len(content)
    for i in range(l):
        words = content[l-1-i].split()
        if words[2] == 'push' and hostname in words[3]:
            lastpushtime = words[0] + ' ' + words[1]
            break
    return lastpushtime
    
def last_remote_push_time():
    '''Open log file, find and return last push time'''
    lastpushtime=''
    with open(LOGFILE) as f:
        content = f.readlines()
    l = len(content)
    for i in range(l):
        words = content[l-1-i].split()
        if words[2] == 'push':
            lastpushtime = words[0] + ' ' + words[1]
            break
    return lastpushtime

def latest_remote_file_time():

    ''' return remote file time '''

    latestfiletime = ''
    with open(LOGFILE) as f:
        content = f.readlines()
    l = len(content)
    words = content[l-1].split()
    colonindex = words.index(':')
    latestfiletime = words[colonindex+1] + ' ' + words[colonindex+2]
    return latestfiletime

def latest_local_file():

    ''' return local file time '''

    os.chdir(CLOUDDATAPATH)
    gfiles = sorted(glob.glob(str(CLOUDDATAPATH / '**/*'), recursive = True), key=os.path.getmtime)    
    newest = gfiles[-1]
    newest_epoch_time = os.path.getmtime(newest)
    newesttimeandname = formatted_time(newest_epoch_time) + ' ' + newest
    return newesttimeandname

def formatted_time(epoch_time):

    ''' return formatted time '''

    ftime = datetime.datetime.fromtimestamp(epoch_time).strftime('%Y-%m-%d %H:%M:%S.%f')
    return ftime[:22]

def header(label):

    ''' print header line with label '''

    print()
    buffer = f'--- {label} ---'
    buffer = buffer.rjust(80, '-')
    print(buffer.upper())

def check_file_exists(filepath):

    ''' check that file exists and exit if it doesn't '''

    if not filepath.is_file():
        print (f'{filepath} doesn\'t exist')
        sys.exit()

def verify_remote_log_exists(accounts):

    ''' create log file if is doesn't exist '''

    # create remote sync_log path if doesn't exist
    remote_sync_log_path = accounts[0][0] + ':sync_log'
    if execute_command(f'rclone lsd {remote_sync_log_path}', verbose=False) != 0:
        print(f'creating {remote_sync_log_path}')
        execute_command(f'rclone mkdir {remote_sync_log_path}', verbose=False)
    # create remote sync_log.txt if doesn't exist
    remote_sync_log_file = remote_sync_log_path + '/sync_log.txt'
    if execute_command(f'rclone lsf {remote_sync_log_file}', verbose=False) != 0:
        print(f'creating {remote_sync_log_file}')
        with open('sync_log.txt', 'w') as outfile:
            outfile.write('#sync_log.txt\n')
        execute_command(f'rclone move sync_log.txt {remote_sync_log_path}', verbose=False)

def get_remote_file_list(accounts):

    ''' write a list of remote filenames to a file '''

    filepath = Path(__file__).parent
    remotelist = []
    filelist = []
    for i in range(len(accounts)):
        remotelist.append(accounts[i][2])
        filelist.append(accounts[i][2] + '.txt')
    for i in range(len(remotelist)):
        print(f'getting remote {remotelist[i]} file list...')
        proc_list = ['rclone', 'lsl', remotelist[i]]
        proc_obj = subprocess.run(proc_list, stdout=subprocess.PIPE)
        output_str = proc_obj.stdout.decode(locale.getdefaultlocale()[1])
        out_file = filepath / filelist[i]
        out_file.write_text(output_str)
    # combine file lists
    with open(filepath / 'combined.txt', 'w') as outfile:
        for fname in filelist:
            with open(filepath / fname, 'r') as infile:
                for line in infile:
                    outfile.write(line)
    new_lines = []
    final_lines = []
    with open(filepath / 'combined.txt', 'r') as in_file:
        lines = in_file.readlines()
    # remove file size
    for line in lines:
        new_line = line[10:]
        new_lines.append(new_line)
    new_lines.sort()
    # remove fractions of seconds from file
    for l in new_lines:
        final_line = l[:19] + l[29:]
        final_lines.append(final_line) 
    final_lines.sort()
    with open(filepath / 'remotes.txt', 'w') as out_file:
        out_file.writelines(final_lines)
    for i in range(len(filelist)):
        (filepath / filelist[i]).unlink()
    (filepath / 'combined.txt').unlink()

def get_local_file_list(accounts):

    ''' write a list of local filenames to a file '''

    print(f'getting local file list...')
    filepath = Path(__file__).parent
    rootpath = Path.home() / 'Cloud'
    proc_list = ['tree', '-ifaD', '--timefmt', '%Y-%m-%d %H:%M:%S', rootpath]
    proc_obj = subprocess.run(proc_list, stdout=subprocess.PIPE)
    output_str = proc_obj.stdout.decode(locale.getdefaultlocale()[1])
    out_file = filepath / 'temp.txt'
    out_file.write_text(output_str)
    with open(filepath / 'temp.txt', 'r') as infile:
        lines = infile.readlines()
    filelines = [] 
    for line in lines:
        if len(line.split()) > 2:
            fpath = Path(line[23:].strip('\n')) 
            if fpath.is_file():
                filelines.append(line)
    bad_chars = ['[', '] ']
    for i in range(len(accounts)):
        bad_chars.append(str(rootpath / accounts[i][1]) + '/')
    new_lines = []
    for line in filelines:
        for i in bad_chars:
            line = line.replace(i, '')
        new_lines.append(line)
    new_lines.sort()
    (filepath / 'temp.txt').unlink()
    with open(filepath / 'locals.txt', 'w') as outfile:
        outfile.writelines(new_lines)

def diff_file_lists(accounts):

    ''' diff remote and local file lists '''

    header('diff remote & local files')
    get_remote_file_list(accounts)
    get_local_file_list(accounts)
    filepath = Path(__file__).parent
    rfile = filepath / 'remotes.txt'
    lfile = filepath / 'locals.txt'
    print()
    execute_command(f'diff {rfile} {lfile}', verbose=True)

def execute_command(cmd, verbose=True):

    ''' execute command using subprocess.run '''

    if verbose == True:
        print(cmd)
    cmd_list = cmd.split()
    result = subprocess.run(cmd_list, capture_output=True, text=True)
    if verbose == True:
        if len(result.stdout) > 0:
            print(result.stdout)
    return result.returncode

def usage():

    ''' display usage if arguments not valid '''

    print()
    print('usage:')
    print('    cloud status')
    print('    cloud push')
    print('    cloud pull')
    print()

if __name__ == '__main__':
    main()
